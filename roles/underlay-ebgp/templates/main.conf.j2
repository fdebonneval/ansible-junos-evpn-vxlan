/* This block of configuration has been generated by the role underlay-ebgp for Ansible */

interfaces {
{% for neighbor in underlay.neighbors %}
    {{ neighbor.interface }} {
{% if neighbor.remote_interface is defined %}
        description " * to {{ neighbor.name }} -- {{ neighbor.remote_interface }}";
{% else %}
        description " * to {{ neighbor.name }}";
{% endif %}
        mtu {{ underlay.mtu_phy_int }}
        unit 0 {
            family inet {
                mtu {{ underlay.mtu_logical_int }};
                address {{ neighbor.local_ip }}/{{ underlay.network_size }};
            }
        }
    }
{% endfor %}
}

protocols {
    bgp {
        log-updown;
        graceful-restart;
        group underlay-ipfabric {
            import BGP_IPCLOS_IN;
            export BGP_IPCLOS_OUT;
            type external;
            mtu-discovery;
            local-as {{ underlay.local.asn }};
            bfd-liveness-detection {
                minimum-interval {{ underlay.bfd.min_interval }};
                multiplier {{ underlay.bfd.multiplier }};
                session-mode {{ underlay.bfd.mode }};
            }
            multipath multiple-as;
{% for neighbor in underlay.neighbors %}
            neighbor {{ neighbor.peer_ip }} {
                peer-as {{ neighbor.asn }};
            }
{% endfor %}
        }
    }
}

routing-options {
    router-id {{ loopback_ip }};
    forwarding-table {
        export PFE_ECMP;
    }
}

policy-options {
    policy-statement PFE_ECMP {
        then {
            load-balance per-packet;
        }
    }
    policy-statement BGP_IPCLOS_IN {
        term LOOPBACKS {
            from {
                route-filter {{ underlay.networks.loopbacks }} orlonger;
            }
            then accept;
        }
    }
    policy-statement BGP_IPCLOS_OUT {
        term LOOPBACK {
            from {
                protocol direct;
                route-filter {{ loopback_ip }}/32 orlonger;
            }
            then {
{% if underlay.community is defined %}
                community add MYCOMMUNITY;
{% endif %}
                next-hop self;
                accept;
            }
        }
{% if underlay.community is defined %}
        term AS_PATH {
            from {
                as-path AS_PATH_LEANGTH_2;
                community MYCOMMUNITY;
            }
            then reject;
        }
{% endif %}
{% if underlay.advertize_local_only is defined %}
        term REJECT {
            then reject;
        }
{% endif %}
    }
{% if underlay.community is defined %}
    as-path AS_PATH_LEANGTH_2 ".{2,}";
    community MYCOMMUNITY members {{ underlay.community }};
{% endif %}
}
